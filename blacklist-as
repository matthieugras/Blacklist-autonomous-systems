#!/bin/sh
PREFIX=/usr/local/bin
SYSTEMS=($(grep -vE '^#|^\s*$' $PREFIX/as_blacklist.conf))
UPDATE=0
CLEAN=0
INSTALL=0
RESTORE=0
ipv4_file=$PREFIX/as_tables_ipv4
ipv6_file=$PREFIX/as_tables_ipv6
HEADER="*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]"

ENDING="-A INPUT -i lo -j ACCEPT
-A OUTPUT -o lo -j ACCEPT
-A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
COMMIT"

set -e

create_tables() {
	echo "$HEADER" > $ipv4_file
	echo "$HEADER" > $ipv6_file

	for curr_sys in "${SYSTEMS[@]}"
	do
		local ALL_TMP=$(whois -h whois.radb.net -i origin $curr_sys)
		local TMP4=($(echo "$ALL_TMP" | grep "route:" | awk '{print $2}'))
		local TMP6=($(echo "$ALL_TMP" | grep "route6:" | awk '{print $2}'))

		for ipv4_addr in "${TMP4[@]}"; do
			echo "Blacklisting IPV4 $ipv4_addr from $curr_sys" 
			echo "-A INPUT -s $ipv4_addr -j DROP" >> $ipv4_file
			echo "-A FORWARD -s $ipv4_addr -j DROP" >> $ipv4_file
			echo "-A OUTPUT -s $ipv4_addr -j DROP" >> $ipv4_file
		done

		for ipv6_addr in "${TMP6[@]}"; do
			echo "Blacklisting IPV6 $ipv6_addr from $curr_sys"
			echo "-A INPUT -s $ipv6_addr -j DROP" >> $ipv6_file
			echo "-A FORWARD -s $ipv6_addr -j DROP" >> $ipv6_file
			echo "-A OUTPUT -s $ipv6_addr -j DROP" >> $ipv6_file
		done
	done	
	
	echo "$ENDING" >> $ipv4_file
	echo "$ENDING" >> $ipv6_file 
}

clean() {
	iptables -F
	ip6tables -F

	iptables -P INPUT ACCEPT
	iptables -P OUTPUT ACCEPT
	iptables -P FORWARD ACCEPT

	ip6tables -P INPUT ACCEPT
	ip6tables -P OUTPUT ACCEPT
	ip6tables -P FORWARD ACCEPT

	if [ -f $ipv4_file ]; then
    		rm $PREFIX/as_tables_ipv4
	fi

	if [ -f $ipv6_file ]; then
		rm $PREFIX/as_tables_ipv6
	fi

	if [ -f /usr/lib/systemd/system/blacklist-as-unit.service ]; then
		systemctl disable blacklist-as-unit.service
		rm /usr/lib/systemd/system/blacklist-as-unit.service
	fi
}

install_service(){
	if [ ! -f $PREFIX/blacklist-as-unit.service ]; then
		crash "Missing file blacklist-as-unit.service, check your installation"
	fi
	if [ ! -d /usr/lib/systemd/system ]; then
		crash "This script is not compatible with your distribution"
	fi

	cp $PREFIX/blacklist-as-unit.service /usr/lib/systemd/system/blacklist-as-unit.service
	systemctl enable blacklist-as-unit.service
}

usage() {
	echo "Usage: $0 -u -c -i -r"
	echo "-u update"
	echo "-c clean"
	echo "-i install service"
	echo "-r restore iptables"
	echo "-h show this help"
	echo "Max 1 of the operations"
}

crash() {
	echo $1
	clean
	exit 1
}

restore(){
	if [ ! -f $ipv4_file ] || [ ! -f $ipv6_file ]; then
		crash "Cannot restore because iptables files do not exist"
	fi
	iptables-restore < $ipv4_file
	ip6tables-restore < $ipv6_file
}

if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

if ! type iptables > /dev/null || ! type ip6tables > /dev/null; then
	echo "Command iptables not found"
fi

while getopts "ucirh" options; do
	case "${options}" in
		u)
			UPDATE=1	
			;;
		c)
			CLEAN=1
			;;
		i)	
			INSTALL=1
			;;
		r)
			RESTORE=1
			;;
		h)
			usage
			exit
			;;
		*)
			crash "Unknown argument"
			;;
	esac
done

if [ $((UPDATE + CLEAN + INSTALL + RESTORE)) -gt 1 ]; then
	crash "Too many options supplied."
fi

if [ $((UPDATE + CLEAN + INSTALL + RESTORE)) -eq 0 ]; then
	usage
	crash "No options supplied."
fi

if [ $UPDATE -eq 1 ]; then
	echo "Updating configuration"
	clean
	create_tables 
	restore
	exit
elif [ $CLEAN -eq 1 ]; then
	echo "Cleaning IP-Tables and removing temporary files"
	clean
	exit
elif [ $RESTORE -eq 1 ]; then
	echo "called restore"
	restore
	exit
else
	echo "Installing service file for automatic setup of iptables"
	install_service
	exit
fi
